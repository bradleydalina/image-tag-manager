
TRACE LOG

-----------------------------------------------
## Calling file locations poorly
-----------------------------------------------
> I have updated the directory locations and uses wordpress constants wp_get_upload_dir(),WP_PLUGIN_DIR, plugins_url

Before:

image-tag-manager/inc/tabs/how-it-works.php:2: <?php $uploads_dir= site_url('wp-content/uploads/'.date('Y').'/'.date('m').'/');?>
image-tag-manager/image-tag-manager.php:38: define("VIRGO_RELPATH", ABSPATH . 'wp-content/plugins/'.basename(plugin_dir_path( __FILE__ )).'/' );
image-tag-manager/image-tag-manager.php:39: define("VIRGO_ABSPATH", site_url('wp-content/plugins/'.basename(plugin_dir_path( __FILE__ )).'/') );

After:
image-tag-manager/inc/tabs/how-it-works.php:2: <?php $uploads_dir= wp_get_upload_dir()["url"];?>
image-tag-manager/image-tag-manager.php:34: define("ITM_RELPATH", realpath(trailingslashit(WP_PLUGIN_DIR.'/'.basename(__DIR__))).'\\' );
image-tag-manager/image-tag-manager.php:35: define("ITM_ABSPATH", trailingslashit(plugins_url(basename(__DIR__))));

-----------------------------------------------
## Generic function (and/or define) names
-----------------------------------------------
> I use the abbreviation of the plugin as prefix


Before:

image-tag-manager/image-tag-manager.php:36: define('VIRGO_TITM','image-tag-manager');
image-tag-manager/image-tag-manager.php:61: class ___Plugin{
image-tag-manager/inc/tabs/tag-settings.php:5: class __virgoSettingsCLS

After:

image-tag-manager/image-tag-manager.php:32: define('ITM_PLUGIN','image-tag-manager');
image-tag-manager/image-tag-manager.php:57: class ___ITMPlugin{
image-tag-manager/inc/tabs/tag-settings.php:5: ___ITMPluginSettings

-----------------------------------------------
## Not using Nonces and/or checking permissions
-----------------------------------------------

> Keep in mind, check_admin_referer alone is not bulletproof security. Do not rely on nonces for authorization purposes.
  Use current_user_can() in order to prevent users without the right permissions from accessing things.

  I believed that I did this part, with 3 layer of Authorization is_user_logged_in(), current_user_can( 'manage_options' ),  is_admin()
  if is placed here, before the inclusion of the file require_once ITM_RELPATH . 'inc/settings.php'

  So in the first place if the user can't meet the following, he may not be abble to access the plugin in the first place as it is invoke on __construct,
  It will immediately call this function and verify the user level access and permissions before it loads the dashboard or form.

  But now I have double it, I also copied it to the function that recieving the post, every post submitted it will be pass thru this conditions

  public function __Settings() {
        if ( ! is_user_logged_in() ) {
            add_action( 'admin_menu', array($this,'__RemoveMenu') );
            wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
        }
        if ( !current_user_can( 'manage_options' ) ) {
            add_action( 'admin_menu', array($this,'__RemoveMenu') );
            wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
        }
        if ( ! is_admin() ) {
        add_action( 'admin_menu', array($this,'__RemoveMenu') );
        wp_die( __( 'You do not have sufficient permissions to access this page. Please contact your administrator.' ) );
        }
        require_once ITM_RELPATH . 'inc/settings.php';
  }

  For the nonce, I think I also did it in the write way I've checked the documentations and the link you provided. But because I did not literally named them as action and nonce it may have confused the reviewer.

  As per documentation sample code below:
  https://developer.wordpress.org/plugins/security/nonces/

  /**
 * request handler
 */
    function wporg_delete_post()
    {
        if (
            isset($_GET['action']) &&
            isset($_GET['nonce']) &&
            $_GET['action'] === 'wporg_frontend_delete' &&
            wp_verify_nonce($_GET['nonce'], 'wporg_frontend_delete')
        ) {
   -------------------------------------------------------------

   And here is my submitted code

   > $_POST['virgoSettingsForm'] equivalent as $_GET['action'] but using POST not GET
   > $_POST['virgoSettingsUpdate'] equivalent as $_GET['nonce']
   > wp_verify_nonce( $_POST['virgoSettingsForm'], 'virgoSettingsUpdate' ) equivalent as wp_verify_nonce($_GET['nonce'], 'wporg_frontend_delete')

   if ( ! empty( $_POST ) && isset( $_POST['virgoSettingsForm'] ) ) {

   if(! isset( $_POST['virgoSettingsForm'] ) || ! wp_verify_nonce( $_POST['virgoSettingsForm'], 'virgoSettingsUpdate' ))
   {

   --------------------------------------------------------------
   Then I have updated it to a more better name.

   > $_POST['ITMPlugin_action'] equivalent as $_GET['action'] but using POST not GET
   > $_POST['ITMPlugin_nonce'] equivalent as $_GET['nonce']
   > wp_verify_nonce( $_POST['ITMPlugin_action'], 'ITMPlugin_nonce' ) equivalent as wp_verify_nonce($_GET['nonce'], 'wporg_frontend_delete')

   if ( ! empty( $_POST ) && isset( $_POST['ITMPlugin_action'] ) ) {

   if(! isset( $_POST['ITMPlugin_action'] ) || ! wp_verify_nonce( $_POST['ITMPlugin_action'], 'ITMPlugin_nonce' )) {
